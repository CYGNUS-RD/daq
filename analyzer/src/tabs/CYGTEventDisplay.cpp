////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// CYGTEventDisplay                                                           //
//                                                                            //
// Begin_Html <!--
/*-->

<!--*/
// --> End_Html
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/* Generated header file containing necessary includes                        */
#include "generated/CYGTEventDisplayGeneratedIncludes.h"

////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include "generated/CYGWindow.h"
#include "generated/CYGEvent.h"
#include "generated/CYGAnalyzer.h"
#include "tabs/CYGTEventDisplay.h"
#include "TCanvas.h"
#include "TImage.h"
#include "TH2F.h"
#include "TStyle.h"
#include <TGNumberEntry.h>
#include <TGLabel.h>

// uncomment if you want to include headers of all folders
//#include "CYGAllFolders.h"


ClassImp(CYGTEventDisplay)

//______________________________________________________________________________
void CYGTEventDisplay::Init()
{

  gStyle->SetPalette(52);
  gStyle->SetOptStat(0);
  
  TGVerticalFrame *fVerticalFrame = new TGVerticalFrame(this,1600,900,kVerticalFrame);

  TGVerticalFrame *fVerticalFramePic = new TGVerticalFrame(fVerticalFrame,1600,600,kVerticalFrame);

  TGHorizontalFrame *fHorizontalFrameRange = new TGHorizontalFrame(fVerticalFramePic,100,200,kHorizontalFrame);

  TGLabel *fLabelLow = new TGLabel(fHorizontalFrameRange, "Low");
  fHorizontalFrameRange->AddFrame(fLabelLow, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,5));

  fNumberLow = new TGNumberEntry(fHorizontalFrameRange, 0, 5, 1, TGNumberFormat::kNESInteger,
					      TGNumberFormat::kNEANonNegative,
					      TGNumberFormat::kNELLimitMinMax,
					      0, 65535);

  fHorizontalFrameRange->AddFrame(fNumberLow, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,5));

  TGLabel *fLabelHigh = new TGLabel(fHorizontalFrameRange, "High");
  fHorizontalFrameRange->AddFrame(fLabelHigh, new TGLayoutHints(kLHintsLeft | kLHintsTop,10,2,2,5));

  fNumberHigh = new TGNumberEntry(fHorizontalFrameRange, 65535, 5, 1, TGNumberFormat::kNESInteger,
						 TGNumberFormat::kNEANonNegative,
						 TGNumberFormat::kNELLimitMinMax,
						 0, 65535);
  
  fHorizontalFrameRange->AddFrame(fNumberHigh, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,5));

  fVerticalFramePic->AddFrame(fHorizontalFrameRange, new TGLayoutHints(kLHintsRight | kLHintsTop,2,2,2,2));

  fCanvas = new TRootEmbeddedCanvas("fCanvas",this,700,600);
  Int_t camCanvas = fCanvas->GetCanvasWindowId();
  TCanvas *c123 = new TCanvas("c123", 680, 580,camCanvas);
  c123->SetRightMargin(0.15);
  fCanvas->AdoptCanvas(c123);
  fVerticalFramePic->AddFrame(fCanvas, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));

  fVerticalFrame->AddFrame(fVerticalFramePic, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));  
  
  fCanvasDig = new TRootEmbeddedCanvas("fCanvasDig",this,700,250);
  Int_t wfCanvasDig = fCanvasDig->GetCanvasWindowId();
  TCanvas *cDig = new TCanvas("cDig", 680, 230, wfCanvasDig);
  cDig->Divide(1,2);
  cDig->cd(1)->SetBottomMargin(0.18);
  cDig->cd(2)->SetBottomMargin(0.18);
  fCanvasDig->AdoptCanvas(cDig);
  fVerticalFrame->AddFrame(fCanvasDig, new TGLayoutHints(kLHintsLeft | kLHintsBottom,2,2,2,2));

  AddFrame(fVerticalFrame, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));

  //TQObject::Connect(fNumberHigh,"ValueSet(Long_t)","TCanvas", c123,"Update()");
  //TQObject::Connect(fNumberLow,"ValueSet(Long_t)","TCanvas", c123,"Update()");
  
}

//______________________________________________________________________________
void CYGTEventDisplay::EndInit()
{
}

//______________________________________________________________________________
void CYGTEventDisplay::EventHandler()
{

  CYGEvent *event = gAnalyzer->GetEvent();
  
  fCanvas->GetCanvas()->cd();

  Int_t low = fNumberLow->GetNumberEntry()->GetIntNumber();
  Int_t high = fNumberHigh->GetNumberEntry()->GetIntNumber();
  
  //TImage *image = event->GetCamPictureAt(0)->GetImage();
  //image->Draw();
  if(event->GetCamPictureSize() > 0){
    Picture *pic = event->GetCamPictureAt(0);
    pic->GetHisto()->GetZaxis()->SetRangeUser(low,high);
    pic->GetHisto()->SetTitle(Form("CAMERA %d",0));
    pic->GetHisto()->SetTitle(Form("CAMERA %d",0));
    pic->GetHisto()->Draw("colz");
  }

  fCanvas->GetCanvas()->Update();

  if(event->GetDGTZWaveformSize()>0){
    fCanvasDig->GetCanvas()->cd(1);
    event->GetDGTZWaveformAt(0)->GetGraph()->SetTitle("");
    event->GetDGTZWaveformAt(0)->GetGraph()->GetXaxis()->SetTitleSize(0.1);
    event->GetDGTZWaveformAt(0)->GetGraph()->GetYaxis()->SetTitleSize(0.1);
    event->GetDGTZWaveformAt(0)->GetGraph()->GetXaxis()->SetTitleOffset(0.8);
    event->GetDGTZWaveformAt(0)->GetGraph()->GetYaxis()->SetTitleOffset(0.5);
    event->GetDGTZWaveformAt(0)->GetGraph()->GetXaxis()->SetLabelSize(0.1);
    event->GetDGTZWaveformAt(0)->GetGraph()->GetYaxis()->SetLabelSize(0.1);
    event->GetDGTZWaveformAt(0)->GetGraph()->GetXaxis()->SetTitle("Time [ns]");
    event->GetDGTZWaveformAt(0)->GetGraph()->GetYaxis()->SetTitle("Amp [mV]");
    event->GetDGTZWaveformAt(0)->GetGraph()->Draw("AL");
    event->GetDGTZWaveformAt(0)->GetGraph()->GetYaxis()->SetNdivisions(505);
    event->GetDGTZWaveformAt(0)->GetGraph()->GetYaxis()->SetRangeUser(-900.,100.);
    fCanvasDig->GetCanvas()->cd(2);
    event->GetDGTZWaveformAt(1)->GetGraph()->SetTitle("");
    event->GetDGTZWaveformAt(1)->GetGraph()->GetXaxis()->SetTitleSize(0.1);
    event->GetDGTZWaveformAt(1)->GetGraph()->GetYaxis()->SetTitleSize(0.1);
    event->GetDGTZWaveformAt(1)->GetGraph()->GetXaxis()->SetTitleOffset(0.8);
    event->GetDGTZWaveformAt(1)->GetGraph()->GetYaxis()->SetTitleOffset(0.5);
    event->GetDGTZWaveformAt(1)->GetGraph()->GetXaxis()->SetLabelSize(0.1);
    event->GetDGTZWaveformAt(1)->GetGraph()->GetYaxis()->SetLabelSize(0.1);
    event->GetDGTZWaveformAt(1)->GetGraph()->GetXaxis()->SetTitle("Time [ns]");
    event->GetDGTZWaveformAt(1)->GetGraph()->GetYaxis()->SetTitle("Amp [mV]");
    event->GetDGTZWaveformAt(1)->GetGraph()->Draw("AL");
    event->GetDGTZWaveformAt(1)->GetGraph()->GetYaxis()->SetNdivisions(505);
    event->GetDGTZWaveformAt(1)->GetGraph()->GetYaxis()->SetRangeUser(-900.,100.);
  }

  fCanvasDig->GetCanvas()->Update();  
  
}

//______________________________________________________________________________
void CYGTEventDisplay::MenuClicked(TGPopupMenu * /* menu */, Long_t /* param */)
{
}

//______________________________________________________________________________
void CYGTEventDisplay::TabSelected()
{
}

//______________________________________________________________________________
void CYGTEventDisplay::TabUnSelected()
{
}

