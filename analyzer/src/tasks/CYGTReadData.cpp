////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// CYGTReadData                                                               //
//                                                                            //
// Begin_Html <!--
/*-->

<!--*/
// --> End_Html
//                                                                            //
//                                                                            //
// Please note: The following information is only correct after executing     //
// the ROMEBuilder.                                                           //
//                                                                            //
// This task accesses the following folders :                                 //
//     Event                                                                  //
//     Hit                                                                    //
//                                                                            //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/* Generated header file containing necessary includes                        */
#include "generated/CYGTReadDataGeneratedIncludes.h"

////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include "generated/CYGAnalyzer.h"
#include "generated/CYGMidasDAQ.h"
#include "generated/CYGEvent.h"
#include "tasks/CYGTReadData.h"
#include "ROMEiostream.h"

using namespace std;

// uncomment if you want to include headers of all folders
//#include "CYGAllFolders.h"
//Int_t NPX = 2048; 
//Int_t NPY = 2048; 
Int_t NPX = 2304;
Int_t NPY = 2304;

ClassImp(CYGTReadData)

//______________________________________________________________________________
void CYGTReadData::Init()
{
}

//______________________________________________________________________________
void CYGTReadData::BeginOfRun()
{
}

//______________________________________________________________________________
void CYGTReadData::Event()
{

  DWORD data;
  CYGEvent *event = gAnalyzer->GetEvent();
  
  //////READ TDC DATA
  int channels[gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries()];
  int times[gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries()];
  
  int nHit=0;

  for(Int_t it=0;it<gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries();it++){

    data = gAnalyzer->GetMidasDAQ()->GetTDC0BankAt(it);
    
    if((data & 0xf8000000) != 0x00000000) continue;
    
    int chan = 0x7F&(data>>19);
    int time = 0x7FFFF&data;
    cout<<"channel# "<<chan << "  " << time <<endl;

    times[nHit]=time;
    channels[nHit]=chan;
    nHit++;

  }

  gAnalyzer->SetHitSize(0);  
  gAnalyzer->SetHitSize(nHit);  
  
  //FILL HITS
  for(Int_t it=0; it<nHit;it++){
    
    gAnalyzer->GetHitAt(it)->Settime(times[it]);
    gAnalyzer->GetHitAt(it)->Setchannel(channels[it]);

  }

  //////DIGITIZER
  event->SetDGTZWaveformSize(0); //Clear previous waveforms

  WORD wdata;
  DWORD header_data;

  int nchtot = 0;
  
  int counter = 0;
  int scounter = 0;
  
  uint32_t nboard = gAnalyzer->GetMidasDAQ()->GetDGH0BankAt(counter++);

  uint32_t *ch0 = new uint32_t[nboard];
  uint32_t *name = new uint32_t[nboard];
  uint32_t *ndgtz = new uint32_t[nboard];
  uint32_t *NCHDGTZ = new uint32_t[nboard];
  uint32_t *NumEvents = new uint32_t[nboard];
  uint32_t *reso = new uint32_t[nboard];
  uint32_t *sampling = new uint32_t[nboard];

  double **offset = new double*[nboard];
  
  for(int ib=0;ib<nboard;ib++){

    ch0[ib] = nchtot;
    
    name[ib] = gAnalyzer->GetMidasDAQ()->GetDGH0BankAt(counter++);
    ndgtz[ib] = gAnalyzer->GetMidasDAQ()->GetDGH0BankAt(counter++);
    NCHDGTZ[ib] = gAnalyzer->GetMidasDAQ()->GetDGH0BankAt(counter++);
    NumEvents[ib] = gAnalyzer->GetMidasDAQ()->GetDGH0BankAt(counter++);
    reso[ib] = gAnalyzer->GetMidasDAQ()->GetDGH0BankAt(counter++);
    sampling[ib] = gAnalyzer->GetMidasDAQ()->GetDGH0BankAt(counter++);

    offset[ib] = new double[NCHDGTZ[ib]];
    
    for(int k=0;k<NCHDGTZ[ib];k++){
	
      header_data = gAnalyzer->GetMidasDAQ()->GetDGH0BankAt(counter+k);
      offset[ib][k] = ((uint32_t)header_data - 32768.)/65536.;

    }
    
    nchtot += NCHDGTZ[ib];
    counter += NCHDGTZ[ib];

  }

  event->SetNTrigger(NumEvents[0]);
  event->SetNChannelDgtz(nchtot);

  //cout << nchtot << "  " << NumEvents[0] << endl;
  event->SetDGTZWaveformSize(nchtot*NumEvents[0]);
  
  for(int ib=0;ib<nboard;ib++){

    for(int iev=0;iev<NumEvents[0];iev++){

      for(int k=0;k<NCHDGTZ[ib];k++){

	Waveform *wfdgtz = event->GetDGTZWaveformAt(nchtot*iev + ch0[ib] + k);
	wfdgtz->RemoveSignal();
	
	Double_t *tmpt = new Double_t[ndgtz[ib]];
	Double_t *tmpv = new Double_t[ndgtz[ib]];
      
      for(Int_t j=0;j<ndgtz[ib];j++){
	  
	  wdata = gAnalyzer->GetMidasDAQ()->GetDIG0BankAt(scounter++);
	  
	  tmpt[j] = j*sampling[ib]/1000.;
	  tmpv[j] = ((uint16_t)wdata-reso[ib]/2.)/(reso[ib]+0.0)*1000. + offset[ib][k]*1000;

          //if(k==1 && iev==0) cout<< j<<"   "<<wdata<<"   "<<tmpv[j] <<endl;
	  //if(k==0) tmpv[j] *= -1.;
	  
	}
	
	wfdgtz->SetNPoints(ndgtz[ib]);
	wfdgtz->Set(ndgtz[ib],tmpt,tmpv);
	
	delete [] tmpt;
	delete [] tmpv;
      
      }
    
    }

  } 
  //////READ CAMERA DATA
  WORD camdata = 0;
    
  event->SetCamPictureSize(0);
  
  event->SetCamPictureSize(1);
  event->GetCamPictureAt(0)->SetNPixels(NPX,NPY);    


  //FULL PICTURE
  Int_t ip=0;
  for(Int_t iy=0;iy<NPY;iy++){

    for(Int_t ix=0;ix<NPX;ix++){

      camdata = gAnalyzer->GetMidasDAQ()->GetCAM0BankAt(ip);

      Double_t pixel_data = camdata + 0.0;

      event->GetCamPictureAt(0)->SetDataAt(ix,iy,pixel_data);
      
      ip++;
      
    }

  }

  /*
  ///SPARSE
  for(Int_t ip=0;ip<gAnalyzer->GetMidasDAQ()->GetCAM0BankEntries();ip+=3){

    UInt_t ix = (UInt_t)(gAnalyzer->GetMidasDAQ()->GetCAM0BankAt(ip));
    UInt_t iy = (UInt_t)(gAnalyzer->GetMidasDAQ()->GetCAM0BankAt(ip+1));
    camdata = gAnalyzer->GetMidasDAQ()->GetCAM0BankAt(ip+2);

    Double_t pixel_data = camdata + 0.0;

    event->GetCamPictureAt(0)->SetDataAt(ix,iy,pixel_data);
    
  }
  */
  ofstream outfile("tmp.dat");

  Picture *pic = event->GetCamPictureAt(0);
  for(Int_t ix=0;ix<NPX;ix++){
    for(Int_t iy=0;iy<NPY;iy++){
      outfile << (int)(pic->GetDataAt(ix,iy)) << "  " ;
    }
    outfile << endl;
  }
  
}

//______________________________________________________________________________
void CYGTReadData::EndOfRun()
{
}

//______________________________________________________________________________
void CYGTReadData::Terminate()
{
}

