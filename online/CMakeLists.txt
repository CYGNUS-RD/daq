#
# CMakeLists.txt for midas examples/experiment
#
# S.R. 28 May 2019
# K.O. 28 June 2019
#
# This cmakefile is dual use:
# if MIDAS_IN_TREE_BUILD is set, the example experiment is built as part of the midas compilation
# if MIDAS_IN_TREE_BUILD is unset, the example experiment is built against MIDAS installed at $MIDASSYS
#
# Optional settings for this cmakefile:
#
# $MIDASSYS - env.variable pointing to the location of MIDAS
# root-config in the $PATH - sets the location of ROOT for the analyzer
# -DNO_ROOT=1 - do not use ROOT
#
# Normal use:
#
# Copy all files from examples/experiment to the experiment directory:
# mkdir -p $HOME/online/src
# cd $HOME/online/src
# cp $MIDASSYS/examples/experiment/* .
# mkdir build
# cd build
# cmake ..
# or cmake3 ..
# make
#
# For testing the cmakefile inside the midas tree:
#
# cd $HOME/git/midas/examples/experiment
# mkdir build
# cd build
# MIDASSYS=$HOME/git/midas cmake ..
# make
#

cmake_minimum_required(VERSION 3.0)
project(cygnus_fe)

message(STATUS "MIDAS cygnus_fe: MIDASSYS set to " $ENV{MIDASSYS})
if (NOT EXISTS $ENV{MIDASSYS})
  message(FATAL_ERROR "Environment variable $MIDASSYS not defined, aborting.")
endif()
set(INC_PATH $ENV{MIDASSYS}/mscb/include $ENV{MIDASSYS}/include $ENV{MIDASSYS}/mxml $ENV{MIDASSYS}/drivers $ENV{MYDRIVER_DIR} $ENV{CAENVME_INCDIR} $ENV{CAENHV_INCDIR} $ENV{ETHERNET_INCDIR} $ENV{CAMERA_INCDIR})
link_directories($ENV{MIDASSYS}/lib)

# default build type
if (NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
    message(STATUS "Setting default build type to \"RelWithDebInfo\"")
    set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "" FORCE)
endif()

set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})

# enable certain compile warnings

add_compile_options(-Wall -Wformat=2 -Wno-format-nonliteral -Wno-strict-aliasing -Wuninitialized -Wno-unused-function -fpermissive)

add_compile_options(-DLINUX -DUNIX)

# Optional ZLIB support
if (NO_ZLIB)
   message(STATUS "MIDAS: ZLIB support is disabled via NO_ZLIB")
else (NO_ZLIB)
find_package(ZLIB)
if (ZLIB_FOUND)
   message(STATUS "MIDAS: Found ZLIB version " ${ZLIB_VERSION_STRING})
   add_compile_options(-DHAVE_ZLIB)
   set(LIBS ${LIBS} -lz)
else ()
   message(STATUS "MIDAS: ZLIB not found")
endif()
endif (NO_ZLIB)

# ass required linux libraries
if (${CMAKE_SYSTEM_NAME} MATCHES Linux) 
   set(LIBS ${LIBS} -lpthread -lutil -lrt -ldl) 
endif() 

set(LIBS ${LIBS} -lCAENVME -lCAENDigitizer -ldcamapi -lcaenhvwrapper -lopen62541)

file(GLOB vme_SRC
  "${CMAKE_SOURCE_DIR}/mydrivers/vme/*.h"
  "${CMAKE_SOURCE_DIR}/mydrivers/vme/*.cxx"
  )
add_library(vme STATIC ${vme_SRC})
target_include_directories(vme PRIVATE ${INC_PATH})
target_link_libraries(vme ${LIBS})

file(GLOB camera_SRC
  "${CMAKE_SOURCE_DIR}/mydrivers/camera/*.h"
  "${CMAKE_SOURCE_DIR}/mydrivers/camera/*.cpp"
  )
add_library(camera STATIC ${camera_SRC})
target_include_directories(camera PRIVATE ${INC_PATH})
target_link_libraries(camera ${LIBS})

add_executable(cygnus_fe cygnus_fe.cxx)
target_include_directories(cygnus_fe PRIVATE ${INC_PATH})
target_link_libraries(cygnus_fe mfe midas vme camera ${LIBS})

set(DRIVERS
  $ENV{MIDASSYS}/drivers/class/hv
  $ENV{MIDASSYS}/drivers/class/multi
  $ENV{MIDASSYS}/drivers/class/generic
  $ENV{MIDASSYS}/drivers/bus/null
  $ENV{MIDASSYS}/drivers/device/mscbdev
  $ENV{MIDASSYS}/mscb/src/mscb
  gem_hv
  gem_dd_sy4527.cxx
  iseg_hps
  opc
  arduino_motor
  )

find_package(open62541 REQUIRED COMPONENTS Events FullNamespace)
if (open62541_FOUND)
  message(STATUS "MIDAS: Found open62541")
endif()

add_executable(scfe scfe.cxx ${DRIVERS})
target_include_directories(scfe PRIVATE ${INC_PATH})
target_link_libraries(scfe mfe midas ${LIBS})

if (NO_ROOT)
   message(STATUS "MIDAS example/experiment: ROOT support is disabled via NO_ROOT")
else (NO_ROOT)

   if (DEFINED ENV{ROOTSYS})
      # You need to tell CMake where to find the ROOT installation. This can be done in a number of ways:
      #   - ROOT built with classic configure/make use the provided $ROOTSYS/etc/cmake/FindROOT.cmake
      #   - ROOT built with CMake. Add in CMAKE_PREFIX_PATH the installation prefix for ROOT
      list(APPEND CMAKE_PREFIX_PATH $ENV{ROOTSYS})

      #---Locate the ROOT package and defines a number of variables (e.g. ROOT_INCLUDE_DIRS)
      find_package(ROOT REQUIRED COMPONENTS MathCore RIO Hist Tree Net)

      #---Define useful ROOT functions and macros (e.g. ROOT_GENERATE_DICTIONARY)
      include(${ROOT_USE_FILE})

      if (ROOT_FOUND)
         separate_arguments(ROOT_CXX_FLAGS UNIX_COMMAND "${ROOT_CXX_FLAGS}")
         message(STATUS "MIDAS: Found ROOT version " ${ROOT_VERSION})
         set(HAVE_ROOT true)
      else (ROOT_FOUND)
         message(STATUS "MIDAS: ROOT not found")
      endif (ROOT_FOUND)
   else ()
      message(STATUS "MIDAS: ROOTSYS not defined")
   endif()

endif(NO_ROOT)

